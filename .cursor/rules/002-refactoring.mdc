---
description: 
globs: 
alwaysApply: false
---
안녕하세요! `pages/index.vue` 파일의 코드를 검토했습니다. 현재 게임 로직과 UI가 잘 구현되어 있지만, 더 유지보수하기 쉽고 확장성 있는 구조로 개선할 수 있는 몇 가지 리팩토링 포인트를 제안합니다.

1.  **상태 관리 분리 (Pinia 도입):**
    *   현재 게임 상태(`deck`, `playerHand`, `currentRoundScore`, `handsLeft`, `discardsLeft`, `currentAnteIndex`, `currentBlindIndex`, `isGameOver` 등)가 컴포넌트 내 `ref`로 관리되고 있습니다. 프로젝트 규칙(`001-nuxt.mdc`)에서 권장하는 Pinia를 도입하여 이 상태들을 중앙 저장소(store)로 옮기는 것을 고려해 보세요.
    *   이렇게 하면 상태 로직이 컴포넌트로부터 분리되어 코드가 더 명확해지고, 상태 변경 추적이 용이해지며, 나중에 다른 컴포넌트에서 상태를 공유해야 할 경우 유용합니다.

2.  **게임 로직 분리 (Composable 사용):**
    *   `startGame`, `shuffleDeck`, `drawCards`, `playHand`, `discardCards`, `advanceToNextBlind`, `handleGameOver` 등 핵심 게임 로직 함수들을 별도의 Composable 함수(예: `useBalatroGame`)로 추출하는 것을 추천합니다.
    *   이 Composable은 Pinia 스토어와 상호작용하며 게임의 핵심 규칙 및 흐름을 관리합니다. Vue 컴포넌트는 이 Composable을 사용하여 게임 상태를 업데이트하고 액션을 트리거하는 역할만 수행하게 되어, 컴포넌트 자체의 복잡도를 크게 낮출 수 있습니다.

3.  **데이터 분리:**
    *   `antes`와 같은 게임 설정 데이터(블라인드 정보 등)가 컴포넌트 내부에 하드코딩되어 있습니다. 이 데이터를 별도의 설정 파일(예: `src/data/antes.ts` 또는 `game.config.ts`)로 분리하면 관리가 더 용이해집니다.

4.  **컴포넌트 분할:**
    *   현재 템플릿이 하나의 큰 덩어리로 구성되어 있습니다. UI의 각 부분을 더 작은 컴포넌트로 분리하는 것을 고려해볼 수 있습니다.
        *   **블라인드 정보:** `BlindInfo.vue` 컴포넌트로 분리 (Props: `currentBlind`, `currentRoundScore`).
        *   **게임 컨트롤:** `GameControls.vue` 컴포넌트로 분리 (Props: `canPlay`, `canDiscard`, `handsLeft`, `discardsLeft`, Emits: `@play`, `@discard`).
        *   **게임 정보:** `GameInfo.vue` 컴포넌트로 분리 (Props: `lastPlayedHandInfo`, `selectedCardsCount`, `handsLeft`, `discardsLeft`).
    *   이렇게 하면 각 컴포넌트가 특정 UI 요소와 관련된 로직만 담당하게 되어 재사용성과 가독성이 향상됩니다.

5.  **타입 정의 강화:**
    *   `utils/poker.ts`에서 사용되는 타입(`Card`, `HandRank` 등)과 게임 상태 관련 타입들을 더 명확하게 정의하고 일관성 있게 사용하는 것이 좋습니다. Pinia 스토어를 사용할 경우, 스토어의 상태와 액션에 대한 타입 정의가 중요합니다.

6.  **UI 라이브러리 활용:**
    *   프로젝트 규칙에 Nuxt UI 사용이 언급되어 있습니다. 현재 기본 HTML 버튼 등을 사용하고 있는데, 일관된 디자인 시스템을 위해 Nuxt UI의 컴포넌트(예: `<UButton>`)를 사용하는 것을 고려해볼 수 있습니다.

7.  **코드 가독성 및 명확성:**
    *   일부 로직(예: `playHand`, `discardCards` 내부의 상태 업데이트 및 다음 단계 결정 로직)에 주석을 추가하여 의도를 명확히 하면 좋습니다.
    *   변수명과 함수명이 일관되고 이해하기 쉬운지 다시 한번 검토해 보세요.